#!/usr/bin/env bash

# $HOME/.bashrc
#
# this file is sourced by all *interactive* bash shells on startup,
# including some apparently interactive shells such as scp and rcp
# that can't tolerate any output. So make sure this doesn't display
# anything or bad things will happen !

# ----------------------- environment variables ----------------------

# XDG vars
# Note: if these changes, please update the values in environment.d/sway.conf
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_STATE_HOME="$HOME/.local/state"
export XDG_CACHE_HOME="$HOME/.cache"

# Set the default editor to neovim
export EDITOR="nvim"

# Prefer US English and use UTF-8.
export LANG='en_US.utf8'
export LANGUAGE='en_US.utf8'
# export LC_ALL='en_US.utf8'

# nvm
export NODE_VERSION=18.0
export NVM_DIR="$XDG_DATA_HOME"/nvm

# Golang
export GO_VERSION=1.21.1
# Note: if GOPATH changes, please update the values in environment.d/sway.conf
export GOPATH="$XDG_DATA_HOME"/go

# set SSH_AUTH_SOCK env var to a fixed value
export SSH_AUTH_SOCK=$HOME/.ssh/ssh-agent.sock

export TERM=xterm-256color # needed to prevent an error on load

# wine will get placed in the xdg config
export WINEPREFIX="$XDG_CONFIG_HOME"/wine/

# make sure that less history is under xdg folders
export LESSHISTFILE="$XDG_STATE_HOME"/less/history

# make sure input rc is properly set to a value in under the xdg folders
export INPUTRC="$XDG_CONFIG_HOME"/readline/inputrc

# make sure that the bash prompt starts a line so we avoid it starting on the same line as the output of another command
export PROMPT_COMMAND='history -a; printf "\n";'

# sets the place where scripts should send their downloads
export DOWNLOADS="$HOME"/Downloads
export DOCOUMENTS="$HOME"/Documents
export EBOOKS="$DOCOUMENTS"/EBooks

# gtk theme
export GTK_THEME='Catppuccin-Mocha-Standard-Blue-Dark'

# fzf theming
export FZF_DEFAULT_OPTS=" \
--color=bg+:#313244,bg:#1e1e2e,spinner:#f5e0dc,hl:#f38ba8 \
--color=fg:#cdd6f4,header:#f38ba8,info:#cba6f7,pointer:#f5e0dc \
--color=marker:#f5e0dc,fg+:#cdd6f4,prompt:#cba6f7,hl+:#f38ba8"

# update sway config if this changes
export DOTFILES="$HOME/dotfiles"
export SCRIPTS="$DOTFILES/bin"
export REPOS="$HOME/repos"

if [[ $- != *i* ]]; then
	# shell is non-interactive. be done now!
	return
fi

# ------------------------------- path -------------------------------

# Add to path
prepend_path() {
	if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
		PATH="$1:$PATH"
	fi
}

# Prepend new items to path (if directory exists)

prepend_path "/bin"
prepend_path "/usr/bin"
prepend_path "/usr/local/bin"
prepend_path "$HOME/bin"
prepend_path "$HOME/.local/bin"
prepend_path "$CARGO_HOME/bin"
prepend_path "/sbin"
prepend_path "/usr/sbin"
prepend_path "/usr/local/go/bin"
prepend_path "$GOPATH/bin"
prepend_path "$SCRIPTS"

# Remove duplicates (preserving prepended items)
# Source: http://unix.stackexchange.com/a/40755

PATH=$(echo -n "$PATH" | awk -v RS=: '{ if (!arr[$0]++) {printf("%s%s",!ln++?"":":",$0)}}')

# Wrap up

export PATH

# ------------------------------ cdpath ------------------------------

# allows you to autocomplete file paths for the colon separated directories from anywhere
export CDPATH=".:$DOTFILES:$REPOS:/media/$USER:$HOME"

# ------------ interactive shell only after this ---------------------

# test for an interactive shell. There is no need to set anything
# past this point for scp and rcp, and it's important to refrain from
# outputting anything in those cases.
if [[ $- != *i* ]]; then
	# shell is non-interactive. be done now!
	return
fi

# ---------------------- local utility functions ---------------------

_have() { type "$1" &>/dev/null; }
# shellcheck disable=SC1090
_source_if() { [[ -r "$1" ]] && source "$1"; }

# ------------------------ bash shell options ------------------------

# shopt is for BASHOPTS, set is for SHELLOPTS

shopt -s checkwinsize # check the window size after each command and, if necessary, update the values of LINES and COLUMNS.
shopt -s nocaseglob   # Case-insensitive globbing (used in pathname expansion)
shopt -s histappend   # Append to the Bash history file, rather than overwriting it
shopt -s cdspell      # Autocorrect typos in path names when using `cd`
shopt -s histappend   # Make sure that we auto append to the bash histor since Windows Terminal keeps dying and not saving the shell history.

# Enable some Bash 4 features when possible:
# * `autocd`, e.g. `**/qux` will enter `./foo/bar/baz/qux`
# * Recursive globbing, e.g. `echo **/*.txt`
for option in autocd globstar; do
	shopt -s "$option" 2>/dev/null
done

# --------------------------- smart prompt ---------------------------

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
	debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
xterm-color | *-256color) color_prompt=yes ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
	if [ -r "$HOME/.dircolors" ]; then
		eval "$(dircolors -b "$HOME/.dircolors")"
	else
		eval "$(dircolors -b)"
	fi

	alias ls='ls --color=auto'

	alias grep='grep --color=auto'
	alias fgrep='fgrep --color=auto'
	alias egrep='egrep --color=auto'
fi

if [ -n "$force_color_prompt" ]; then
	if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
		# We have color support; assume it's compliant with Ecma-48
		# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
		# a case would tend to support setf rather than setaf.)
		color_prompt=yes
	else
		color_prompt=
	fi
fi

MAUVE="\[\033[38;2;203;166;247m\]"
BLUE="\[\033[38;2;137;180;250m\]"
RESET="\[\033[00m\]"

if [ "$color_prompt" = yes ]; then
	PS1="${BLUE}\w${RESET}\$(__git_ps1_windows_mount ' ${MAUVE}(%s)${RESET}')$ "
else
	PS1="\w\$(__git_ps1_windows_mount ' (%s)')$ "
fi

unset color_prompt force_color_prompt

# ------------------------------ history -----------------------------

# Increase Bash history size. Allow 32Â³ entries; the default is 500.
export HISTSIZE='32768'
export HISTFILESIZE="${HISTSIZE}"

# make history file respect xdg dirs
export HISTFILE="${XDG_STATE_HOME}"/bash/history

# Omit duplicates and commands that begin with a space from history.
export HISTCONTROL='ignoreboth:erasedups'

# ------------------------------ aliases and general functions -----------------------------
#      (use exec scripts instead, which work from vim and subprocs)

# general
alias dot='cd $DOTFILES'
alias chmox='chmod +x'
alias cat="bat -pp"

# moving around
alias ..='cd ..'
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../../'

# ls
alias ll='ls -alF'
alias lh='ls -alh'
alias la='ls -A'
alias l='ls -CF'

# make it so that wget can work without needing to write its config to the home dir
alias wget='wget --hsts-file="$XDG_DATA_HOME/wget-hsts"'

# load all files from dotfiles/bash/functions directory
if [ -d "$DOTFILES/bash/functions" ]; then
	for file in "$DOTFILES/bash/functions"/*.sh; do
		# shellcheck disable=SC1090
		source "$file"
	done
fi

# ------------- binds / completion ------------

# make sure bash completion gets put in xdg folders
export BASH_COMPLETION_USER_DIR="$XDG_CONFIG_HOME"/bash-completion
export BASH_COMPLETION_USER_FILE="$BASH_COMPLETION_USER_DIR"/bash_completion

bind 'set show-all-if-ambiguous on'
bind 'TAB:menu-complete'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
	if [ -f /usr/share/bash-completion/bash_completion ]; then
		# shellcheck disable=SC1091
		. /usr/share/bash-completion/bash_completion
	elif [ -f /etc/bash_completion ]; then
		# shellcheck disable=SC1091
		. /etc/bash_completion
	fi
fi

if [ -d "$BASH_COMPLETION_USER_DIR" ]; then
	for file in "$BASH_COMPLETION_USER_DIR"/*; do
		# shellcheck disable=SC1090
		. "$file"
	done
fi

# -------------------- command not found handler --------------------

# handles certain file types when nothing is specified for the program so they still open up
function command_not_found_handle() {
	if [[ $1 =~ .*.pdf || $1 =~ .*.PDF ]]; then
		evince "$1"
	elif [[ $1 =~ .*.jar || $1 =~ .*.JAR ]]; then
		java -jar "$1"
	elif is_personal_computer && [[ $1 =~ .*.html || $1 =~ .*.HTML || $1 =~ .*.HTM || $1 =~ .*.htm ]]; then
		brave "$1"
	elif [[ $1 =~ .*.zip || $1 =~ .*.ZIP || $1 =~ .*.war || $1 =~ .*.WAR ]]; then
		unzip -l "$1"
	elif [[ $1 =~ .*.gz || $1 =~ .*.tgz || $1 =~ .*.TGZ ]]; then
		tar -tf "$1"
	elif is_personal_computer && [[ $1 =~ .*.epub ]]; then
		editepub "$1"
	else
		# based on https://askubuntu.com/a/1464110
		printf "%s: command not found\n" "$1" >&2
		return 127
	fi
}

# -------------------- personalized configuration --------------------

_source_if "$HOME/.localrc"

# only check for is_personal_computer after loading the computer type from `.localrc`
# Force GTK and other use of wayland variables on personal computers
is_personal_computer && export XDG_CURRENT_DESKTOP="sway"
is_personal_computer && export GDK_BACKEND=wayland
is_personal_computer && export CLUTTER_BACKEND=wayland
is_personal_computer && export QT_QPA_PLATFORM=wayland

# -------------------- run common setup functions --------------------

_source_if "$NVM_DIR/nvm.sh" # This loads nvm
# shellcheck disable=SC1091
_have nvm && . "$NVM_DIR/bash_completion" # This loads nvm bash_completion

sshstart # start SSH for Github if it has not already started

c

_have cat-ascii && cat-ascii
