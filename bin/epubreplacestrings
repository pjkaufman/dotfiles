#!/usr/bin/env python
"""
This file is meant to be used on the text based content files of an epub. This allows for the replacement of common stylistic
changes and translation errors with the desired value making later book maintenance less of a hassle.
"""

import re
import sys
from dataclasses import dataclass
from typing import Any, Callable, Union

def out_of_the_blue_regex_handler(match):
    group1 = match.group(1)
    firstLetter = 'O'
    if group1 == 'a':
        firstLetter = 'o'

    group3 = match.group(3)

    return "{0}{1}".format(firstLetter, group3)

def no_wonder_regex_handler(match):
    group1 = match.group(1)
    firstLetter = 'N'
    if group1 == 'l':
        firstLetter = 'n'

    group2 = match.group(2)

    return "{0}{1}".format(firstLetter + 'o', group2)

@dataclass
class replaceString:
    search: str
    replace: Union[str, Callable[[Any], str]]
    rational: str

regexesToReplace = (
    replaceString(
      search ="(\. ?){2}\.",
      replace ="…",
      rational ="Proper ellipses should be used where possible as it keeps things clean and consistent",
    ),
    replaceString(
      search ="(?<!!)--(?!>)",
      replace ="—",
      rational ="Em dashes should be used where possible as it keeps things clean and consistent",
    ),
    replaceString(
      search ="(?<!~)~(?!~)",
      replace ="!",
      rational ="Tildes should be replaced with an exclamation mark when they are by themselves as they seem interchangeable, though it could be another form of punctuation for drawing out the sound of the last letter used",
    ),
    replaceString(
      search =r"(B|b)y the by",
      replace =r"\1y the way",
      rational ="'By the by' seems to be an improper translation of 'By the way', so we should auto-correct it to its proper English idiom",
    ),
    replaceString(
      search =r"(A|a) bolt (o)(ut of the blue)",
      replace = out_of_the_blue_regex_handler,
      rational ="'a bolt out of the blue' seems to be an improper translation of 'out of the blue', so we should auto-correct it to its proper English idiom",
    ),
    replaceString(
      search =r"(L|l)ittle( wonder)",
      replace = no_wonder_regex_handler,
      rational ="'little wonder' seems to be an improper translation of 'no wonder', so we should auto-correct it to its proper English idiom",
    ),
    replaceString(
      search =r"(S|s)neaked",
      replace =r"\1nuck",
      rational ="Use snuck instead of sneaked as it is the more commonly used version of the word nowadays",
    ),
)

def replace_strings(text: str):
    for regexToReplace in regexesToReplace:
        text = re.sub(regexToReplace.search, regexToReplace.replace, text)

    return text


if __name__ == "__main__":
    if len(sys.argv) >= 2:
        with open(sys.argv[1], "r+") as f:
            text = f.read()
            text = replace_strings(text)
            f.seek(0)
            f.write(text)
            f.truncate()
